x <- c(-0.5, 0, 1, 1, 1.5)
y <- c(0, 0, 2, 0, 0)
plot(x, y, lwd = 3, frame = FALSE, type = "l")
1.5 * .75 / 2
pbeta(.75, 2, 1)
pbeta(0.75, 2, 1)
?pbeta
pbeta(c(0.4, 0.5, 0.6), 2, 1)
1-pbeta(c(0.4, 0.5, 0.6), 2, 1)
qbeta(0.5, 2, 1)
data(galton)
library(datasets)
data(galton)
library(usingR)
install.packages("UsingR")
library(UsingR)
data(galton)
library(manipulate)
install.packages("manipulate")
library(manipulate)
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
dat <- data.frame(
x = c(sample(0 : 1, nosim, replace = TRUE),
apply(matrix(sample(0 : 1, nosim * 10, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(0 : 1, nosim * 20, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(0 : 1, nosim * 30, replace = TRUE),
nosim), 1, mean)
),
size = factor(rep(c(1, 10, 20, 30), rep(nosim, 4))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth = 1 / 12, colour = "black");
g + facet_grid(. ~ size)
library(ggplot2)
dat <- data.frame(
x = c(sample(0 : 1, nosim, replace = TRUE),
apply(matrix(sample(0 : 1, nosim * 10, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(0 : 1, nosim * 20, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(0 : 1, nosim * 30, replace = TRUE),
nosim), 1, mean)
),
size = factor(rep(c(1, 10, 20, 30), rep(nosim, 4))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth = 1 / 12, colour = "black");
g + facet_grid(. ~ size)
nosim <- 10000
dat <- data.frame(
x = c(sample(0 : 1, nosim, replace = TRUE),
apply(matrix(sample(0 : 1, nosim * 10, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(0 : 1, nosim * 20, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(0 : 1, nosim * 30, replace = TRUE),
nosim), 1, mean)
),
size = factor(rep(c(1, 10, 20, 30), rep(nosim, 4))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth = 1 / 12, colour = "black");
g + facet_grid(. ~ size)
nosim <- 10000; n <- 10
dat <- data.frame(
x = c(rnorm(nosim), apply(matrix(rnorm(nosim * n), nosim), 1, mean)),
what = factor(rep(c("Obs", "Mean"), c(nosim, nosim)))
)
ggplot(dat, aes(x = x, fill = what)) + geom_density(size = 2, alpha = .2)
dat <- data.frame(
x = c(sample(1 : 6, nosim, replace = TRUE),
apply(matrix(sample(1 : 6, nosim * 2, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 3, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 4, replace = TRUE),
nosim), 1, mean)
),
size = factor(rep(1 : 4, rep(nosim, 4))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.25, colour = "black")
g + facet_grid(. ~ size)
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
1-(2+1)/36
deck
52
1/4
1/13
0
(3*4)/52
2/51
0.8^2
0.64
mypdf
mypdf(1.6)
integrate(mypdf, 0, 1.6)
sqrt(0.5*4)
0.997/0.001
0.997*0.001
(1-0.997)*(1-0.001)
(1-0.985)*(1-0.001)
0.000997/(0.000997+0.014985)
data(sleep)
?sleep
head(sleep)
library(ggplot)
library(ggplot2)
qplot(sleep)
qplot(sleep$group, sleep$extra)
g1 <- sleep$extra[1 : 10]
g2 <- sleep$extra[11 : 20]
difference <- g2 - g1
mn <- mean(difference)
s <- sd(difference)
n <- 10
mn + c(-1, 1) * qt(0.975, n-1) * s / sqrt(n)
t.test(difference)
t.test(g2, g1, paired = TRUE)
library(datasets)
data(ChickWeight)
library(reshape2)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[(-1:2)] <- paste("time", names(wideCW[-(1:2)], sep=""))
names(wideCW)[(-1:2)] <- paste("time", names(wideCW)[-(1:2)], sep="")
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[(-1:2)] <- paste("time", names(wideCW)[-(1:2)], sep="")
library(datasets); data(ChickWeight); library(reshape2)
##define weight gain or loss
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
library(dplyr)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
head(wideCW)
library(UsingR)
data(father.son)
t.test(father.son$sheight - father.son$fheight)
head(wideCW)
wideCW14 <- subset(wideCW, Diet %in% c(1,4))
t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW14)
t.test(gain ~ Diet, paired = FALSE, var.equal = FALSE, data = wideCW14)
install.packages("knitr")
library(knitr)
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(0.975, 2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g1 - g2
difference <- g2 - g1
mean(difference)
s <- sd(difference)
mn + c(-1, 1) * s / sqrt(10)
mn + c(-1, 1) * qt(0.975, 9) * s / sqrt(10)
x$conf.int
t.test(difference)$conf.int
sp <- (8-1) * 15.34^2 + (21 - 1) * 18.23^2
ns <- 8 + 21 - 2
sp <- (sp/ns)^0.5
sp <- sqrt(sp/ns)
132.86 - 127.44 + c(-1, 1) * qt(0.95, ns) * sq
132.86 - 127.44 + c(-1, 1) * qt(0.95, ns) * sp
132.86 - 127.44 + c(-1, 1) * qt(0.95, ns) * sp * sqrt(1/8 + 1/21)
132.86-127.44+c(-1,1)*qt(0.95,ns)*sp*sqrt(1/8+1/21)
132.86-127.44+c(-1,1)*qt(0.975,ns)*sp*sqrt(1/8+1/21)
sqrt((var(g1)+var(g2)/18)
)
sqrt((9*var(g1)+9*var(g2)/18)
)
sp <- sqrt((9*var(g1)+9*var(g2)/18))
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md + c(-1, 1) * qt(0.975, sp) * sp * sqrt(1/10 + 1/10)
md + c(-1, 1) * qt(0.975, 18) * sp * sqrt(1/10 + 1/10)
t.test(g1, g2, paired = FALSE, var.equal = TRUE)$conf
t.test(g2, g1, paired = FALSE, var.equal = TRUE)$conf
t.test(g2, g1, paired = TRUE)$conf
num <- (15.34^2/8+18.23^2/21)
num <- (15.34^2/8+18.23^2/21)^2
den <- (15.34^2/8)^2/(8-1) + (18.23^2/21)^2/20
mydf <- num/den
132.86-127.44+c(-1, 1)*qt(0.975, mydf)*(15.34^2/8 + 18.23^2/21)
132.86-127.44+c(-1, 1)*qt(0.975, mydf)*sqrt(15.34^2/8 + 18.23^2/21)
1100+c(-1,1)*qt(0.975, 8)*30/sqrt(9)
qt(0.975, 8)
2/2.306*sqrt(9)
sp <- sqrt((9*0.6^2 + 9*0.68^2)/18)
3-5+c(-1, 1)*qt(0.975, 18)*sp*sqrt(1/10+1/10)
sp <- sqrt((9*0.6^2+9*0.68^2)/18)
sp
3-5+c(-1, 1)*qt(0.975, 18)*sp*sqrt(1/5)
4-6+c(-1.96, 1.96)*sqrt(0.5^2/100+2^2/100)
6-4+c(-1.96, 1.96)*sqrt(0.5^2/100+2^2/100)
sp <- sqrt((8*1.5^2 + 8*1.8^2)/16)
sp
-3-1+c(-1,1)*qt(0.95, 16)*sp*sqrt(1/9+1/9)
sp <- sqrt((9*0.6 + 9*0.68)/18)
3-5+c(-1, 1)*qt(0.975, 18)*sp*sqrt(1/5)
install.packages("kernlab")
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator = rbino(4601, size = 1, prob = 0.5)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
str(trainIndicator)
trainSpam = spam[trainIndicator == 1,]
testSpam = spam[trainIndicator == 0,]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[,1:4] + 1))
hCluster = hclust(dist(t(trainSpam[, 1 : 57])))
plot(hCluster)
hCluster = hclust(dist(t(log10trainSpam[, 1 : 57] + 1)))
hCluster = hclust(dist(t(log10(trainSpam[, 1 : 57] + 1)))
)
hCluster = hclust(dist(t(log10(trainSpam[, 1 : 57] + 1)))
)
plot(hCluster)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam[i], response = "numType"))
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
trainSpam$numType = as.numeric(trainSpam$type)-1
costFunction = function(x,y) sum(x!=(y > 0.5))
cvError = rep(NA,55)
library(boot)
for(i in 1:55){
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula,family="binomial",data=trainSpam)
cvError[i] = cv.glm(trainSpam,glmFit,costFunction,2)$delta[2]
}
warnings()
names(trainSpam)[which.min(cvError)]
## Use the best model from the group
predictionModel = glm(numType ~ charDollar,family="binomial",data=trainSpam)
## Get predictions on the test set
predictionTest = predict(predictionModel,testSpam)
predictedSpam = rep("nonspam",dim(testSpam)[1])
## Classify as `spam' for those with prob > 0.5
predictedSpam[predictionModel$fitted > 0.5] = "spam"
table(predictedSpam, testSpam$type)
## Use the best model from the group
predictionModel = glm(numType ~ charDollar,family="binomial",data=trainSpam)
## Get predictions on the test set
predictionTest = predict(predictionModel,testSpam)
predictedSpam = rep("nonspam",dim(testSpam)[1])
## Classify as `spam' for those with prob > 0.5
predictedSpam[predictionModel$fitted > 0.7] = "spam"
table(predictedSpam, testSpam$type)
data(father.son)
library(UsingR)
data(father.son)
B <- 10000
resamples <- matrix(sample(x, n * B, replace = TRUE), B, n)
x <- father.son$sheight
resamples <- matrix(sample(x, n * B, replace = TRUE), B, n)
n <- length(x)
resamples <- matrix(sample(x, n * B, replace = TRUE), B, n)
medians <- apply(resamples, 1, median)
sd(medians)
quantile(medians, c(0.025, 0.975))
g <- ggplot(data.frame(medians = medians), aes(x = medians))
g + geom_histogram(color = "black", fill = "lightblue", binwidth = 0.05)
g + geom_histogram(color = "black", fill = "lightblue", binwidth = 0.025)
median(x)
data(InsectSprays)
subdata <- InsectSprays[InsectSprays$spray %in% c("B", "C")]
subdata <- InsectSprays[InsectSprays$spray %in% c("B", "C"),]
y <- subdata$count
group <- as.character(subdata$spray)
testStat <- function(w, g) mean(w[g =="B"]) - mean(w[g == "C"])
observedStat <- testStat(y, group)
permutations <- sapply(1 : 10000, function(i) testStat(y, sample(group)))
observedStat
mean(permutations > observedStat)
g <- ggplot(data.frame(permutations = permutations), aes(x = permutations))
g + geom_histogram(color = "black", fill = "lightblue", binwidth = 1)
g + geom_histogram(color = "black", fill = "lightblue", binwidth = 0.05)
g + geom_histogram(color = "black", fill = "lightblue", binwidth = 0.5)
baseline <- c(140, 138, 150, 148, 135)
mean(baseline)
later <- c(132, 135, 151, 146, 130)
mean(ater)
mean(later)
?t.test
t.test(baseline, later, alternative = "two.sided", paired = TRUE)
1100 + c(-1, 1) * qt(0.975, 8) * 30 / sqrt(9)
?rbinom
rbinom(4, 3, 0.5) + rbinom(4, 4, 0.5)
qbinom(3, 4, 0.5)
pbinom(3, 4, 0.5)
pbinom(2, 4, 0.5, lower.tail = FALSE)
10/1787
?rpois
ppois(10, 1/100)
ppois(10, 1/100*1787)
1/100
?t.test
sp <- sqrt((8*1.5^2 + 8 * 1.8^2)/16)
t_star <- (1 - (-3))/sp/sqrt(1/9 + 1/9)
t_star
?t
?t.test
?pt
pt(5.121475, 16)
pt(5.121475, 16)-pt(-5.121475, 16)
sp
-4 + c(-1, 1) * qt(0.975, 16) * sp * sqrt(1/9 + 1/9)
c(-1, 1) * qt(0.975, 16) * sp * sqrt(1/9 + 1/9)
0.01 + qt(0.95, 99) * 0.04 / 10
qt(0.95, 99) * 0.04 / 10
?power.t.test
power.t.test(100, 0.01, 0.04)
power.t.test(100, 0.01, 0.04, alternative = "one.sided")
power.t.test(100, 0.01, 0.04, alternative = "one.sided", type = "one.sample")
power.t.test(100, 0.01, 0.04, alternative = "one.sided", type = "paired")
power.t.test(delta = 0.01, sd = 0.04, power = 0.9)
power.t.test(delta = 0.01, sd = 0.04, power = 0.9, alternative = "one.sided", type = "paired")
power.t.test(140, 0.01, 0.04, alternative = "one.sided", type = "paired")
power.t.test(140, 0.01, 0.04, alternative = "one.sided", type = "paired", sig.level = 0.1)
?exp
pexp?
?pexp
hist(rexp(1000))
library(ggplot2)
?ggplot
ggplot(data = data.frame(exp = rexp(1000)), aes(x = exp))
g <- ggplot(data = data.frame(exp = rexp(1000)), aes(x = exp))
?ggplot
?geom_hist
?hist_geom
?geom_bar
g + geom_bar()
?geom_bar
g + geom_bar(binwidth = 10)
g + geom_histogram(binwidth = 10)
?geom_histogram
g + geom_histogram(data = exp, binwidth = 10)
g + geom_histogram(data = exp, binwidth = 1)
g + geom_histogram(data = exp, binwidth = 10)
g <- ggplot(data = data.frame(exp = rexp(1000)), aes(x = exp))
g + geom_histogram(data = exp, binwidth = 10)
hist(rexp(1000))
hist(rexp(1000)/1000)
?rexp
hist(rexp(1000, rate = 0.2)/0.2)
hist(rexp(1000, rate = 0.2)*0.2)
hist(rexp(1000, rate = 0.2)/1000)
qplot(rexp(1000, rate = 0.2)/1000)
exp_demo <- rexp(1000, 0.2)
g <- ggplot(data = data.frame(x = exp_demo), aes(x = x))
g + geom_histogram(binwidth = 1, color = "black", fill = "aqua", aes(y = ..density..))
?aes
g + geom_histogram(binwidth = 1, color = "black", fill = "#55AAFF", aes(y = ..density..))
set.seed(32948)
exp_demo <- rexp(1000, 0.2)
g <- ggplot(data = data.frame(x = exp_demo), aes(x = x))
g + geom_histogram(binwidth = 1, color = "black", fill = "#55AAFF", aes(y = ..density..))
g + geom_histogram(binwidth = 1, color = "black", fill = "#55AAFF", aes(y = ..density..)) + bw_theme()
g + geom_histogram(binwidth = 1, color = "black", fill = "#55AAFF", aes(y = ..density..)) + theme_bw()
set.seed(32948)
exp_demo <- rexp(1000, 0.2)
mean(exp_demo)
median(exp_demo)
1/0.2
?geom_abline()
0.2*exp(0.2*6)
0.2*exp(0.2*5)
0.2*exp(0.2*1)
0.2*exp(0.2*2)
0.2*exp(0.2*3)
0.2*exp(0.2*4)
0.2*exp(0.2*5)
0.2*exp(0.2*6)
0.2*exp(0)
0.2*exp(0.2*1)
qplot(0.2*exp(0.2*x) ~ x)
function (x) {}
function (x) {
0.2*exp(0.2*x)
}
exp_dist <- function (x) {
0.2*exp(0.2*x)
}
qplot(x, exp_dist(x))
?seq
x <- seq(0, 10, length.out = 100)
x <- seq(0, 10, length.out = 101)
qplot(x, exp_dist(x))
exp_dist <- function (x) {
0.2*exp(-0.2*x)
}
qplot(x, exp_dist(x))
5/sqrt(40)
library(datasets)
data(ToothGrowth)
?ToothGrowth
head(ToothGrowth)
unique(ToothGrowth$dose)
unique(ToothGrowth$len)
str(ToothGrowth)
hclust(ToothGrowth)
?hclust
clustering <- hclust(ToothGrowth)
clustering <- hclust(ToothGrowth$len)
kClust <- kmeans(ToothGrowth)
kClust <- kmeans(ToothGrowth, centers = 6)
kClust <- kmeans(ToothGrowth[ToothGrowth$supp == "OJ"], centers = 6)
kClust <- kmeans(ToothGrowth[ToothGrowth$supp == "OJ",], centers = 6)
ToothGrowth[ToothGrowth$supp == "OJ",]
kClust <- kmeans(ToothGrowth[ToothGrowth$supp == "OJ",], centers = 3)
table(kClust$cluster, ToothGrowth$dose[ToothGrowth$supp == "OJ"])
table(kClust$cluster, ToothGrowth$dose[ToothGrowth$supp == "OJ"])
?kmeans
kClust <- kmeans(ToothGrowth$len, centers = 6)
table(kClust$cluster, ToothGrowth$dose)
kClust <- kmeans(ToothGrowth$len, centers = 6, nstart = 100)
table(kClust$cluster, ToothGrowth$dose)
table(kClust$cluster, ToothGrowth$supp)
kClust <- kmeans(ToothGrowth$len, centers = 3, nstart = 100)
table(kClust$cluster, ToothGrowth$supp)
table(kClust$cluster, ToothGrowth$dose)
qplot(ToothGrowth$supp, ToothGrowth$len)
qplot(ToothGrowth$dose, ToothGrowth$len)
?qplot
qplot(ToothGrowth$dose, ToothGrowth$len, geom = "boxplot")
qplot(ToothGrowth$len, geom = "boxplot", aes=(group = ToothGrowth$supp))
qplot(ToothGrowth$dose, ToothGrowth$len, geom = "boxplot", aes=(group = ToothGrowth$dose))
qplot(ToothGrowth$len, geom = "boxplot", aes=(group = ToothGrowth$dose))
qplot(ToothGrowth$len, geom = "boxplot", aes=(group = as.factor(ToothGrowth$dose))
)
?qplot
qplot(factor(ToothGrowth$dose), ToothGrowth$len, geom = "boxplot")
qplot(ToothGrowth$supp, ToothGrowth$len, geom = "boxplot")
?geom_boxplot
g <- ggplot(ToothGrowth$len, aes(factor(ToothGrowth$dose), ToothGrowth$supp))
g <- ggplot(data = ToothGrowth$len, aes(factor(ToothGrowth$dose), ToothGrowth$supp))
g <- ggplot(data = ToothGrowth, aes(factor(ToothGrowth$dose), ToothGrowth$len))
g + geom_boxplot()
g + geom_boxplot() + labs(x = "Dose", y = "Tooth Length")
g + geom_boxplot() + labs(x = "Dose", y = "Tooth Length") + theme_bw()
?ToothGrowth
?aes
?aggregate
OJ <- ToothGrowth[ToothGrowth$supp == "OJ",]
heaD(OJ)
head(OJ)
OJ <- ToothGrowth[ToothGrowth$supp == "OJ",-2]
OJ
?dplyr
library(dplyr)
?dplyr
?ToothGrowth
?interaction
g <- ggplot(data = ToothGrowth, aes(x = factor(dose), y = len, fill = supp))
g + geom_boxplot()
g + geom_boxplot() + theme_bw()
?ToothGrowth
?t
?t.interval
?t.test
?select
OJ_lowdose <- select(ToothGrowth, supp == "OJ", dose == 0.5)
OJ_lowdose <- select(ToothGrowth, supp == "OJ" & dose == 0.5)
OJ_lowdose <- filter(ToothGrowth, supp == "OJ" & dose == 0.5)
OJ_lowdose
?filter
OJ_lowdose <- filter(ToothGrowth, supp == "OJ" & dose == 0.5)$len
OJ_lowdose
?t.test
?print
?t.test
knitr::opts_chunk$set(echo = TRUE)
OJ_highdose <- filter(ToothGrowth, supp == "OJ" & dose == 1.5)$len
VC_highdose <- filter(ToothGrowth, supp == "VC" & dose == 1.5)$len
test_results <- t.test(OJ_highdose, VC_highdose, alternative = "two.sided")
OJ_highdose <- filter(ToothGrowth, supp == "OJ" & dose == 1.5)
OJ_highdose <- filter(ToothGrowth, supp == "OJ" & dose == 1.5)$len
OJ_highdose <- filter(ToothGrowth, supp == "OJ" & dose == 1.5)
head(OJ_highdose)
head(ToothGrowth)
unique(ToothGrowth$dose)
setwd('C:\Users\Aaron\Documents\GitHub\RepData_PeerAssessment1')
setwd('C:/Users/Aaron/Documents/GitHub/RepData_PeerAssessment1')
activity <- read.csv("activity.csv")
str(activity)
head(activity)
unique(activity$steps)
names(activity)
unique(activity$date)
?date
